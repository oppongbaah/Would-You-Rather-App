{"version":3,"sources":["Components/NavBar.js","Components/Icons.js","Components/IconsInfo.js","Components/Poll.js","Components/PoolList.js","redux/actionCreators/acUsers.js","Components/Dashboard.js","redux/middlewares/mwUsers.js"],"names":["Navigation","className","activeClassName","exact","to","SEND","IoIosSend","SHARE","FaShareAlt","Icons","props","LIKE","COMMENT","onClick","handleClick","likeClass","likeIconText","handleComment","commentClass","LIKED","FaHeart","IconsInfo","likesCount","repliesCount","Tweet","tweet","author","timestamp","commentingOn","text","media","_id","time","parseInt","FaRegThumbsUp","FaRegCommentAlt","likes","comments","useState","setLikesCount","commentsCount","setCommentsCount","likeClicked","flagLike","commentClicked","flagComment","setLikeClass","setCommentClass","setLikeIconText","src","userImage","alt","username","Date","toLocaleString","hour","minute","second","hour12","getDate","getMonth","getFullYear","parentUser","style","borderTop","margin","newState","connect","state","tweets","map","Poll","userStatus","status","type","actions","payload","users","dispatch","dispatch_fetchUsers","axios","get","then","data","user","actionCreators","response","catch","err","useEffect","console","log"],"mappings":"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","file":"static/js/4.1c4453de.chunk.js","sourcesContent":["import {NavLink} from 'react-router-dom';\n\nfunction Navigation(){\n  return (\n    <>\n      <nav className=\"nav\">\n        <ul>\n          <li >\n            <NavLink\n              className=\"nav-item\"\n              activeClassName=\"active\"\n              exact to=\"/\">\n              Home\n            </NavLink>\n          </li>\n          <li>\n            <NavLink\n              className=\"nav-item\"\n              activeClassName=\"active\"\n              to=\"/new-poll\">\n              New Poll\n            </NavLink>\n          </li>\n        </ul>\n      </nav>\n    </>\n  )\n}\n\nexport default Navigation;\n","import {FaShareAlt} from 'react-icons/fa';\nimport {IoIosSend} from 'react-icons/io';\n\nconst SEND = IoIosSend;\nconst SHARE = FaShareAlt;\n\nfunction Icons(props) {\n  // get the LIKE and COMMENT state through props\n  const LIKE = props.LIKE;\n  const COMMENT = props.COMMENT;\n  \n  return (\n    <div className=\"tweet-icons\">\n      <div>\n        <span onClick={props.handleClick}> \n          <i className={props.likeClass}> < LIKE /> </i>\n        </span>\n        <p> {props.likeIconText} </p>\n      </div>\n      <div>\n        <span onClick={props.handleComment}> \n          <i className={props.commentClass}> < COMMENT /> </i> \n        </span>\n        <p>Comment</p>\n      </div>\n      <div>\n        <span> <i className=\"tweet-icon\"> < SHARE /> </i> </span>\n        <p>Share</p>\n      </div>\n      <div>\n        <span> <i className=\"tweet-icon\"> < SEND /> </i> </span>\n        <p>Send</p>\n      </div>\n    </div>\n  )\n}\n\nexport default Icons;","import {FaHeart} from 'react-icons/fa';\n\nconst LIKED = FaHeart;\n\nfunction IconsInfo(props) {\n    return (\n        <div className=\"likes-replies\">\n            {\n            props.likesCount > 0 &&\n            <h4 className=\"liked\"> <i className=\"liked-icon\"> < LIKED /> </i> {props.likesCount} </h4>\n            }         \n            {\n            props.repliesCount > 1 && \n                <h4 className=\"commented\"> {props.repliesCount} comments </h4>\n            }\n            {\n            props.repliesCount === 1 &&\n                <h4 className=\"commented\"> {props.repliesCount} comment </h4>\n            }  \n        </div>\n    )\n}\n\nexport default IconsInfo;","import { useState } from 'react';\nimport Icons from './Icons';\nimport IconsInfo from './IconsInfo';\nimport {FaRegThumbsUp, FaRegCommentAlt} from 'react-icons/fa';\n\nfunction Tweet(props) {\n  const {\n    author,\n    timestamp,\n    commentingOn,\n    text,\n    media,\n    _id \n  } = props.tweet;\n\n  let time = parseInt(timestamp);\n\n  // set variables for the icons\n  let LIKE = FaRegThumbsUp;\n  let COMMENT  = FaRegCommentAlt;\n  // get the initial counts from the database\n  const likes = parseInt(props.likesCount(_id));\n  const comments = parseInt(props.repliesCount(_id));\n  // set state hooks for the icon info\n  const [likesCount, setLikesCount] = useState(likes);\n  const [commentsCount, setCommentsCount] = useState(comments);\n  // set state hooks for flags\n  let [likeClicked, flagLike] = useState(false);\n  let [commentClicked, flagComment] = useState(false);\n  // set a state hook for the icon classes\n  let [likeClass, setLikeClass] = useState('tweet-icon like');\n  let [commentClass, setCommentClass] = useState('tweet-icon comment');\n  // set a state hook for thhe like icon\n  let [likeIconText, setLikeIconText] = useState(\"Like\");\n\n  // event handler to handle the click event for like\n  const handleLike = () => {\n    // set a null variable to represent the new state\n    let newState = null;\n\n    if (!likeClicked) {\n      newState = setLikesCount(likesCount+1);\n      flagLike(likeClicked = true);\n      setLikeClass('tweet-icon unlike');\n      setLikeIconText(likeIconText=\"Unlike\");\n    }\n    else {\n      newState = setLikesCount(likesCount-1);\n      flagLike(likeClicked = false);\n      setLikeClass('tweet-icon');\n      setLikeIconText(likeIconText=\"Like\");\n    }\n\n    return newState;\n  }\n\n  // event handler to handle the click event for like\n  const handleComment = () => {\n    // set a null variable to represent the new state\n    let newState = null;\n\n    if (!commentClicked) {\n      newState = setCommentsCount(commentsCount+1);\n      flagComment(commentClicked = true);\n      setCommentClass('tweet-icon uncomment');\n    }\n\n    return newState;\n  }\n  \n  return (\n    <div className=\"tweet\">\n      <div className=\"avatar\">\n        <img src={props.userImage(author)} alt=\"profile\" />\n    </div>\n    <div className=\"tweet-info\">\n      <div>\n        <span> {props.username(author)} </span>\n        <div className=\"date-time\">\n          <span>{new Date(time).toLocaleString('en-US',\n            { hour: 'numeric',\n              minute: 'numeric',\n              second: 'numeric',\n              hour12: true }\n          )}</span> |\n          <span> {new Date(time).getDate()}</span>/\n          <span>{new Date(time).getMonth()}</span>/\n          <span>{new Date(time).getFullYear()}</span>\n        </div>\n        {\n          commentingOn && \n            <div className=\"replying-to\">\n              <span> repying to @{props.parentUser(commentingOn)} </span>\n            </div>\n        }\n        <p> {text} </p>\n      </div>\n      {\n        media &&\n          <img className=\"tweet-image\" src={media} alt=\"media\" />\n      }\n      <IconsInfo likesCount={likesCount} repliesCount={commentsCount}/>\n      <div style={{ borderTop: \"2px solid #969696\", margin: \"10px 0\"}}></div>\n      <Icons handleClick={handleLike} handleComment={handleComment}\n       LIKE={LIKE} COMMENT={COMMENT} likeClass={likeClass} \n       likeIconText={likeIconText} commentClass={commentClass} />\n    </div>\n  </div>\n)\n}\n\nexport default Tweet;","import Poll from './Poll';\nimport {connect} from 'react-redux';\n\nfunction TweetList(props) {\n  const tweets = props.tweets;\n\n  return (\n    <>\n      <ul>\n      {\n        tweets.map(tweet => (\n          !tweet.commentingOn &&\n            <li key={tweet._id}>\n              <Poll\n               tweet={tweet}\n               parentUser={props.parentUser}\n               username={props.username}\n               userImage={props.userImage}\n               likesCount={props.likesCount}\n               repliesCount={props.repliesCount}\n               />\n            </li>\n        ))\n      }\n      </ul>\n    </>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    tweets: state.tweets,\n  }\n}\n\nexport default connect(mapStateToProps)(TweetList);\n","import * as actions from '../actions';\r\n\r\nexport function loadUser(user) {\r\n    return {\r\n        type: actions.ADD_USER,\r\n        payload: {\r\n            _id: user._id,\r\n            username: user.username,\r\n            image: user.imageURL,\r\n            questions: user.questions,\r\n            answers: user.answers,\r\n            password: user.password\r\n        }\r\n    }\r\n}\r\n\r\nexport function userStatus(status) {\r\n    return {\r\n        type: actions.STATUS,\r\n        payload: {\r\n            status\r\n        }\r\n    }\r\n}","import {useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport Navigation from './NavBar';\nimport PollList from './PoolList';\n// import {\n//   fetchTweets\n// }\n// from '../redux/middlewares/mwTweets';\nimport {\n  fetchUsers\n} from '../redux/middlewares/mwUsers';\n\nfunction Dashboard(props) {\n\n  // const polls = props.polls;\n  const users = props.users;\n\n  useEffect(() => {\n    props.dispatch_fetchUsers();\n  }, [])\n  \n  // const getParentTweets = (tweetId) => {\n  //   let parentTweets = polls\n  //   .filter(tweet => tweet.commentingOn === tweetId)\n  //   return parentTweets;\n  // }\n  \n  // const getRepliedUsername = (tweetId) => {\n  //   const parentTweets = getParentTweets(tweetId);\n  //   const authors = parentTweets.map(tweet => tweet.author)\n  //   return authors\n  // }\n  \n  const getUsername = (userId) => {\n    const name = users\n    .filter(user => user._id === userId)\n    .map(user => user.username)\n    return name\n  }\n  \n  const getUserImageURL = (userId) => {\n    const imageURL = users\n    .filter(user => user._id.trim() === userId.trim())\n    .map(user => user.image);\n    return imageURL\n  }\n  \n  // const getLikesCount = (tweetId) => {\n  //   const likesCount = polls\n  //   .filter(tweet => tweet._id === tweetId)\n  //   .map(tweet => tweet.likes.length);\n  //   return likesCount;\n  // }\n  \n  // const getRepliesCount = (tweetId) => {\n  //   const repliesCount = polls\n  //   .filter(tweet => tweet._id === tweetId)\n  //   .map(tweet => tweet.comments.length);\n  //   return repliesCount;\n  // }\n\n//   <PollList \n//   parentUser={getRepliedUsername}\n//   username={getUsername} \n//   userImage={getUserImageURL}\n//   likesCount={getLikesCount}\n//   repliesCount={getRepliesCount}\n// />\nconsole.log(props.userStatus.status)\n  return(\n    <>\n      <Navigation />\n      <h2 className=\"center\"> Your Dashboard </h2>\n    </>\n  )\n  \n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users,\n    userStatus: state.userStatus\n  }\n}\n\nconst mapDispatchToProps = dispatch => {\n  return {\n    dispatch_fetchUsers: () => dispatch(fetchUsers())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(Dashboard);\n","import * as actionCreators from '../actionCreators/acUsers';\r\nimport axios from 'axios';\r\n\r\nconst api = 'https://wouldyouratherapplication.herokuapp.com';\r\n\r\nexport function fetchUsers() {\r\n    return (dispatch => {\r\n        axios.get(`${api}/users/fetch-all`)\r\n        .then(users => {\r\n            users.data.map(user => {\r\n                dispatch(actionCreators.userStatus(\"Hel\"))\r\n                dispatch(actionCreators.userStatus(user.response.status))\r\n            })\r\n        })\r\n        .catch(err => {\r\n            dispatch(actionCreators.userStatus(err.response.status))\r\n        })\r\n    })\r\n}"],"sourceRoot":""}