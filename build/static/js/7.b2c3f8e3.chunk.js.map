{"version":3,"sources":["helpers/global.js","Components/Poll.js","Components/PoollList.js","Components/Dashboard.js"],"names":["cookies","Cookies","getImageURL","users","userId","filter","user","_id","imageURL","map","getUsername","username","getUserId","uid","toString","get","trim","connect","state","payload","data","authedUser","name","props","question","author","timestamp","optionOne","dateTime","parseInt","image","className","src","alt","Date","toLocaleString","hour","minute","second","hour12","getDate","getMonth","getFullYear","text","onClick","viewClicked","bind","this","polls","withRouter","requiredPolls","length","handleViewBtnClick","history","push","status","unansweredPolls","recommendedPoll","votes","includes","optionTwo","Math","floor","random","viewRecommended","userStatus","authUserStatus","pollStatus","btnStatus","dispatch","ownProps","dispatch_getBtnStatus","getBtnStatus","dispatch_fetchPoll","fetchPoll","useEffect","handleRecBtnDispatch","handleAnsBtnDispatch","handleUnansBtnDispatch","override","css","useState","setPolls","allBtnClass","setAllbtnClass","ansBtnClass","setAnsbtnClass","unansBtnClass","setUnansbtnClass","answeredPolls","checkAvailability","color","loading","size","to","pathname","desc","redirected"],"mappings":"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","file":"static/js/7.b2c3f8e3.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nconst getImageURL = (users, userId) => {\n    return users\n    .filter(user => user._id === userId && !!user.imageURL)\n    .map(user => user.imageURL)\n}\n\nconst getUsername = (users, userId) => {\n    return users\n    .filter(user => user._id === userId && !!user.username)\n    .map(user => user.username) \n}\n\nconst getUserId = (users, userId) => {\n    const uid = users \n    .filter(user => user._id === userId)\n    .map(user => user._id)\n\n    return uid.toString() === cookies.get('authedUser').trim()\n     ? 'you' : uid\n}\n\nexport {\n    getImageURL, \n    getUsername,\n    getUserId\n}\n\n","import React from 'react';\nimport {connect} from 'react-redux';\nimport {getImageURL, getUsername, getUserId} from '../helpers/global';\nimport {BsQuestionDiamondFill} from 'react-icons/bs';\n\nfunction Poll(props) {\n  const {\n    author,\n    timestamp,\n    optionOne\n  } = props.question\n\n\n  let dateTime = parseInt(timestamp);\n  let image = getImageURL(props.users, author);\n  image = image[0] ? image : 'avatar.png';\n  let username = getUsername(props.users, author);\n  \n  return (\n    <div className=\"poll\">\n      <div className=\"avatar\">\n        <img src={`/usersAvatar/${image}`} alt=\"profile\" />\n      </div>\n      <div className=\"poll-info\">\n        <div>\n          <span> {username} </span>\n          <div className=\"date-time\">\n            <span>{new Date(dateTime).toLocaleString('en-US',\n              { hour: 'numeric',\n                minute: 'numeric',\n                second: 'numeric',\n                hour12: true }\n            )}</span> |\n            <span> {new Date(dateTime).getDate()}</span>/\n            <span>{new Date(dateTime).getMonth()}</span>/\n            <span>{new Date(dateTime).getFullYear()}</span>\n          </div>\n          <div className=\"replying-to\">\n                <span> asked by @{getUserId(props.users, author)} </span>\n          </div>\n          <p> Would You Rather? </p>\n          <p className=\"option-one\"> <BsQuestionDiamondFill /> {optionOne.text} ... </p> \n          <br></br>\n          <button className=\"view btn btn-info\" \n            onClick={props.viewClicked.bind(this, props.question)}>\n            View \n          </button>\n        </div>\n      </div>\n    </div>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users.payload.data,\n    authedUser: state.users.authedUser.name\n  }\n}\n\nexport default connect(mapStateToProps)(Poll);","import React from 'react';\nimport Poll from './Poll';\nimport {connect} from 'react-redux';\nimport {withRouter} from 'react-router-dom';\n\nfunction PollList(props) {\n  const polls = !props.requiredPolls.length ? props.polls : props.requiredPolls;\n\n  const handleViewBtnClick = (question) => {\n    props.history.push(`/questions/${question._id}/${props.status}`, {\n      question,\n      users:props.users\n    });\n  }\n\n  const viewRecommended = () => {\n    let unansweredPolls;\n    if(!props.requiredPolls.length) {\n      unansweredPolls = props.polls\n      .filter(question => !(question.optionOne.votes.includes(props.authedUser)) \n      && !(question.optionTwo.votes.includes(props.authedUser)));\n    }\n    else {\n      unansweredPolls = polls;\n    }\n    \n    const i = Math.floor(Math.random() * unansweredPolls.length);\n    \n    const recommendedPoll = unansweredPolls[i];\n    \n    return (\n      <li  >\n        <Poll question={recommendedPoll} viewClicked={handleViewBtnClick} />\n      </li>\n    )\n  }\n\n  const viewOther = () => {\n    return (\n      <ul>\n      {\n        polls\n        .map(question => (\n          <li key={question._id} >\n            <Poll question={question} viewClicked={handleViewBtnClick} />\n          </li>\n      ))\n      }\n      </ul>\n    )\n  }\n\n  return (\n    <>\n      {\n        props.status !== \"recommended\" &&\n        viewOther()\n      }\n      {\n        props.status === \"recommended\" &&\n        viewRecommended()\n      }\n    </>\n  )\n}\n\nconst mapStateToProps = state => {\n  return {\n    polls: state.polls.payload.data,\n    users: state.users.payload.data,\n    authedUser: state.users.authedUser.name\n  }\n}\n\nexport default connect(mapStateToProps)(withRouter(PollList));","import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {Redirect, withRouter} from 'react-router-dom';\nimport Cookies from 'universal-cookie';\nimport PollList from './PoollList';\nimport '../styles/dashboard.css';\nimport { css } from \"@emotion/react\";\nimport {DotLoader} from \"react-spinners\";\nimport { getBtnStatus, fetchPoll} from '../redux/middlewares/mwPolls';\n\nconst cookies = new Cookies();\n\nfunction Dashboard(props) {\n\n    /* eslint-disable */\n    useEffect(() => {\n      props.dispatch_fetchPoll();\n      props.dispatch_getBtnStatus(\"recommended\");\n      handleRecBtnDispatch();\n    }, [])\n\n    useEffect(() => {\n      if(props.btnStatus === \"answered\"){\n        handleAnsBtnDispatch();\n      }\n      else if(props.btnStatus === \"unanswered\") {\n        handleUnansBtnDispatch();\n      }\n      else if(props.btnStatus === \"recommended\") {\n        handleRecBtnDispatch();\n      } \n    }, [props.btnStatus])\n    /* eslint-enable */\n\n    const override = css`\n      display: block;\n      margin: 20% auto;\n      border-color: tomato;\n      `;\n\n    const [requiredPolls, setPolls] = useState(props.polls);\n    const [allBtnClass, setAllbtnClass] = useState('inactive');\n    const [ansBtnClass, setAnsbtnClass] = useState('inactive');\n    const [unansBtnClass, setUnansbtnClass] = useState('inactive');\n\n    const toggleAllClass = () => {\n      allBtnClass === 'active' ?\n      setAllbtnClass('inactive') :\n      setAllbtnClass('active');\n    }\n\n    const toggleAnsClass = () => {\n      ansBtnClass === 'active' ?\n      setAnsbtnClass('inactive') :\n      setAnsbtnClass('active');\n    }\n\n    const toggleUnansClass = () => {\n      unansBtnClass === 'active' ?\n      setUnansbtnClass('inactive') :\n      setUnansbtnClass('active')\n    }\n\n    const handleAnsBtnDispatch = () => {\n      const answeredPolls = props.polls\n      .filter(question => question.optionOne.votes.includes(props.authedUser) \n      || question.optionTwo.votes.includes(props.authedUser));\n\n      toggleAnsClass();\n      setAllbtnClass('inactive');\n      setUnansbtnClass('inactive');\n      setPolls(answeredPolls);\n    }\n\n    const handleAnsBtnClicked = () => {\n      props.dispatch_getBtnStatus(\"answered\");\n    }\n\n    const handleUnansBtnDispatch = () => {\n      const unansweredPolls = props.polls\n      .filter(question => !(question.optionOne.votes.includes(props.authedUser)) \n      && !(question.optionTwo.votes.includes(props.authedUser)));\n    \n      toggleUnansClass();\n      setAllbtnClass('inactive');\n      setAnsbtnClass('inactive');\n      setPolls(unansweredPolls);\n    }\n\n    const handleUnansBtnClick = () => {\n      props.dispatch_getBtnStatus(\"unanswered\");\n    }\n    \n    const handleRecBtnDispatch = () => {\n      const unansweredPolls = props.polls\n      .filter(question => !(question.optionOne.votes.includes(props.authedUser)) \n      && !(question.optionTwo.votes.includes(props.authedUser)));\n\n      toggleAllClass();\n      setAnsbtnClass('inactive');\n      setUnansbtnClass('inactive');\n      setPolls(unansweredPolls);\n    }\n    \n    const handleRecBtnClick = () => {\n      props.dispatch_getBtnStatus(\"recommended\");\n    }\n\n    const checkAvailability = () => {\n      const unansweredPolls = props.polls\n      .filter(question => !(question.optionOne.votes.includes(cookies.get(\"authedUser\"))) \n      && !(question.optionTwo.votes.includes(cookies.get(\"authedUser\"))));\n\n      if (!unansweredPolls.length && !requiredPolls.length) {\n        return (\n          <>\n            <br></br><br></br>\n            <p> You have no unanswered questions. Thank you! </p>\n          </>\n        )\n      }\n      else if (props.btnStatus === \"answered\") {\n        if(requiredPolls.length) {\n          return <PollList requiredPolls={requiredPolls} status={props.btnStatus} />\n        }\n        else {\n          return (\n            <>\n              <br></br><br></br>\n              <p> You have not answered any question yet. Thank you! </p>\n            </>\n          )\n        }\n      }\n      else if (props.btnStatus === \"unanswered\" && requiredPolls.length) {\n        return <PollList requiredPolls={requiredPolls} status={props.btnStatus} /> \n      }\n      else if (props.btnStatus === \"recommended\") {\n        if (unansweredPolls.length) {\n          return <PollList requiredPolls={requiredPolls} status={props.btnStatus} /> \n        }\n        else {\n          return (\n            <>\n              <br></br><br></br>\n              <p> No Recommendation. Thank you! </p>\n            </>\n          )\n        }\n      }\n    }\n\n    return(\n      <>\n          {\n              cookies.get('authedUser') &&\n              <>           \n                <div className='main-container'>\n                  <div className=\"top-panel\">\n                    <button onClick={handleRecBtnClick.bind(this)}\n                      className={`btn btn-success all ${allBtnClass}`}>\n                      Recommended\n                    </button>\n                    <button onClick={handleUnansBtnClick.bind(this)}\n                      className={`btn btn-danger unanswered ${unansBtnClass}`} >\n                      Unanswered\n                    </button>\n                    <button className={`btn btn-primary answered ${ansBtnClass}`}\n                      onClick={handleAnsBtnClicked.bind(this)} >\n                      Answered\n                    </button>\n                  </div>\n                  {\n                    props.pollStatus === \"done\" && props.userStatus === \"done\" && props.authUserStatus === \"done\" &&\n                      checkAvailability()\n                  }\n                  {\n                    props.pollStatus === \"loading\" && props.userStatus ===\"loading\" && props.authUserStatus !== \"done\" &&\n                      <>\n                        <br></br><br></br>\n                        <DotLoader color={\"tomato\"} loading={true} css={override} size={60} />\n                      </>\n                  }\n                  {\n                    props.pollStatus === \"failed\" && props.authUserStatus === \"failed\" &&\n                      <>\n                        <br></br><br></br>\n                        <p> No Internet Connection </p>\n                      </>\n                  }\n                </div>\n              </>\n              }\n            {\n              !cookies.get('authedUser') &&\n                <Redirect to={{\n                    pathname: '/users/login',\n                    state: {desc: \"sign in required\", redirected: true}\n              }}/>\n          }\n      </>\n    )\n  \n}\n\nconst mapStateToProps = state => {\n  return {\n    users: state.users.payload.data,\n    userStatus: state.users.payload.status,\n    authedUser: state.users.authedUser.name,\n    authUserStatus: state.users.authedUser.status,\n    polls: state.polls.payload.data,\n    pollStatus: state.polls.payload.status,\n    btnStatus: state.polls.btnStatus\n  }\n}\n\nconst mapDispatchToProps = (dispatch, ownProps) => {\n  return {\n    dispatch_getBtnStatus: (status) => dispatch(getBtnStatus(status)),\n    dispatch_fetchPoll: () => dispatch(fetchPoll())\n  }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(Dashboard));\n"],"sourceRoot":""}