{"version":3,"sources":["helpers/global.js","Components/QuestionDetails.js"],"names":["cookies","Cookies","getImageURL","users","userId","filter","user","_id","imageURL","map","getUsername","username","getUserId","uid","toString","get","trim","connect","state","payload","data","authedUser","name","polls","voteStatus","vote","status","votedQuestion","dispatch","dispatch_fetchPoll","fetchPoll","dispatch_vote","pid","option","withRouter","props","useEffect","useState","btnAClass","setBtnAClass","btnBClass","setBtnBClass","btnFlag","setBtnFlag","tagA","setTagA","tagB","setTagB","question","history","location","length","author","optionOne","optionTwo","image","handleOptAClick","console","log","push","listen","action","handleOptBClick","a","className","src","alt","disabled","onClick","bind","text","to","pathname","desc","redirected","err"],"mappings":"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","file":"static/js/9.f4238839.chunk.js","sourcesContent":["import Cookies from 'universal-cookie';\n\nconst cookies = new Cookies();\n\nconst getImageURL = (users, userId) => {\n    return users\n    .filter(user => user._id === userId && !!user.imageURL)\n    .map(user => user.imageURL)\n}\n\nconst getUsername = (users, userId) => {\n    return users\n    .filter(user => user._id === userId && !!user.username)\n    .map(user => user.username) \n}\n\nconst getUserId = (users, userId) => {\n    const uid = users \n    .filter(user => user._id === userId)\n    .map(user => user._id)\n\n    return uid.toString() === cookies.get('authedUser').trim()\n     ? 'you' : uid\n}\n\nexport {\n    getImageURL, \n    getUsername,\n    getUserId\n}\n\n","import React, {useState, useEffect} from 'react';\nimport {connect} from 'react-redux';\nimport {withRouter, Redirect} from 'react-router-dom';\nimport {getImageURL, getUserId} from '../helpers/global';\nimport {vote, fetchPoll} from '../redux/middlewares/mwPolls';\nimport Cookies from 'universal-cookie';\nimport '../styles/dashboard.css';\nimport {MdDone} from 'react-icons/md';\n\nconst cookies = new Cookies();\n\nconst QuestionDetails = (props) => {\n\n  useEffect(() => {\n    props.dispatch_fetchPoll();\n  }, [props.voteStatus])\n\n  const [btnAClass, setBtnAClass] = useState(\"\");\n  const [btnBClass, setBtnBClass] = useState(\"\");\n  const [btnFlag, setBtnFlag] = useState(false);\n  const [tagA, setTagA] = useState(\"A\");\n  const [tagB, setTagB] = useState(\"B\");\n\n  try {\n\n    const question = props.history.location.state.question;\n\n    const users = props.users.length\n    ? props.users\n    : props.history.location.state.users;\n\n    const {\n        author,\n        optionOne,\n        optionTwo\n    } = question;\n    \n    let image = getImageURL(users, author);\n    image = image[0] ? image : 'avatar.png';\n\n    const handleOptAClick = (option) => {\n      props.dispatch_vote(question._id, props.authedUser, option);\n\n      setBtnAClass(\"selected\");\n      setBtnFlag(true);\n      setTagA(<MdDone/>)\n      console.log(props.votedQuestion)\n      props.history.push(`/questions/${question._id}/answered`, {\n        question,\n        users\n      });\n\n    }\n\n    props.history.listen((location, action) => {\n      if (action === \"POP\") {\n        props.history.push('/');\n      }\n    })\n    \n    const handleOptBClick = async (option) => {\n      try {\n        await props.dispatch_vote(question._id, props.authedUser, option);\n  \n        setBtnBClass(\"selected\");\n        setBtnFlag(true);\n        setTagB(<MdDone/>);\n        props.history.push(`/questions/${question._id}/answered`, {\n          question,\n          users\n        });\n      }\n      catch (err) {console.log(err);}\n    }\n\n    const view = () => {\n      return (\n        <>\n        <div className=\"poll\">\n            <div className=\"avatar\">\n                <img src={`/usersAvatar/${image}`} alt=\"profile\" />\n            </div>\n            <div className=\"poll-info\">\n                <div className=\"asked-by\">\n                    <span> asked by @{getUserId(props.users, author)} </span>\n                </div>\n                <div className=\"question\">\n                    <h2> Would You Rather? </h2>\n                    <div className=\"option-btn\">\n                        <div> <p> {tagA} </p> </div>\n                        <button className={`btn btn-primary active ${btnAClass}`} \n                          disabled={btnFlag}\n                          onClick={handleOptAClick.bind(this, \"optionOne\")} >\n                          {optionOne.text}\n                        </button>\n                    </div>\n                    <div className=\"option-btn\">\n                        <div> <p> {tagB} </p> </div>\n                        <button className={`btn btn-primary active ${btnBClass}`}\n                          disabled={btnFlag}\n                          onClick={handleOptBClick.bind(this, \"optionTwo\")} >\n                          {optionTwo.text}\n                        </button>\n                    </div>\n                </div>\n            </div>\n        </div>\n        </>\n      )\n    }\n\n    return(\n      <>\n        {\n            cookies.get(\"authedUser\") &&\n              view()\n        }\n        {\n            !cookies.get(\"authedUser\") &&\n                <Redirect to={{\n                    pathname: '/users/login',\n                    state: {desc: \"sign in required\", redirected: true}\n                }} />\n        }\n      </>\n    )\n  }\n  catch(err){\n    console.log(err);\n    return <Redirect to=\"/page-not-found-return-home\" />\n  }\n}\n\nconst mapStateToProps = state => {\n    return {\n        users: state.users.payload.data,\n        authedUser: state.users.authedUser.name,\n        polls: state.polls.payload.data,\n        voteStatus: state.polls.vote.status,\n        votedQuestion: state.polls.vote.data\n    }\n}\n\nconst mapDispatchToProps = dispatch => {\n    return {\n      dispatch_fetchPoll: () => dispatch(fetchPoll()),\n      dispatch_vote: (pid, uid, option) => dispatch(vote(pid, uid, option))\n    }\n}\n\nexport default connect(mapStateToProps, mapDispatchToProps)(withRouter(QuestionDetails));"],"sourceRoot":""}